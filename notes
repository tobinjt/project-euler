
Problem 71:
The result must be between 2/5 and 3/7, so I can probably figure out bounds for
n.  Iterate over d, saving any n/d in the right range, and sort the results.
Or, iterate over d and save the best value as I go.
Hmm, another time I wrote:
    Bounds are 3/8 to 3/7

TODO: could I start from the top instead?

upper_bound := 3/7  // this will never change
lower_bound := 2/5  // this will gradually be tightened.
DENOMINATOR:
for denominator := 6; i <= 1000000; i++ {
  // Some type coercion will be necessary here.
  lower_numerator := denominator * lower_bound
  upper_numerator := denominator * upper_bound
  for numerator := upper_numerator; numerator >= lower_numerator; numerator-- {
    fraction := numerator/denominator
    if fraction < upper_bound && fraction > lower_bound {
      lower_bound = fraction
      continue DENOMINATOR
    }
  }
}
// Reduce the fraction.
